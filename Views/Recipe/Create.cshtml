@model RecipeSystem.Models.Recipe
@{
    ViewData["Title"] = "Добавить рецепт";
}

<h1>Добавить рецепт</h1>

<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Название рецепта</label>
                <input asp-for="Name" class="form-control" maxlength="50" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Описание рецепта</label>
                <textarea asp-for="Description" class="form-control" maxlength="255"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CookingTime" class="control-label">Время приготовления (в минутах)</label>
                <input asp-for="CookingTime" type="number" class="form-control" min="1" value="30" />
                <span asp-validation-for="CookingTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Servings" class="control-label">Количество порций</label>
                <input asp-for="Servings" type="number" class="form-control" min="1" value="1" />
                <span asp-validation-for="Servings" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CategoryID" class="control-label">Категория</label>
                <select asp-for="CategoryID" class="form-control" asp-items="ViewBag.Categories"></select>
                <span asp-validation-for="CategoryID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ComplexityId" class="control-label">Сложность</label>
                <select asp-for="ComplexityId" class="form-control" asp-items="ViewBag.Complexity"></select>
                <span asp-validation-for="ComplexityId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhotoFile" class="control-label">Фото</label>
                <input asp-for="PhotoFile" type="file" accept="image/jpeg,image/png" class="form-control" data-val="false" />
                <span asp-validation-for="PhotoFile" class="text-danger"></span>
            </div>

            <div id="ingredients-container">
                <h4>Ингредиенты</h4>
                @{
                    var ingredientsCount = Model?.RecipeIngredients?.Count ?? 1;
                    for (int i = 0; i < ingredientsCount; i++)
                    {
                        <div class="ingredient-row">
                            <div class="form-group">
                                <label>Ингредиент</label>
                                <select name="recipeIngredients[@i].IngredientId" class="form-control ingredient-select" asp-items="ViewBag.Ingredients" onchange="updateMeasure(this, @i)">
                                    @if (Model?.RecipeIngredients != null && i < Model.RecipeIngredients.Count && Model.RecipeIngredients[i] != null)
                                    {
                                        <option value="@Model.RecipeIngredients[i].IngredientId" selected>@Model.RecipeIngredients[i].Ingredient?.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Количество</label>
                                <input name="recipeIngredients[@i].Quantity" type="number" class="form-control" min="0.01" step="0.01" value="@(Model?.RecipeIngredients != null && i < Model.RecipeIngredients.Count ? Model.RecipeIngredients[i].Quantity : 1)" />
                            </div>
                            <div class="form-group" style="display:none;">
                                <label>Единица измерения</label>
                                <span class="measure-display" data-index="@i">@(Model?.RecipeIngredients != null && i < Model.RecipeIngredients.Count ? Model.RecipeIngredients[i].Ingredient?.Measure : "")</span>
                                <input name="recipeIngredients[@i].Measure" type="hidden" class="measure-input" value="@(Model?.RecipeIngredients != null && i < Model.RecipeIngredients.Count ? Model.RecipeIngredients[i].Ingredient?.Measure : "")" />
                            </div>
                            @if (i > 0)
                            {
                                <button type="button" class="btn btn-danger remove-ingredient">Удалить</button>
                            }
                        </div>
                    }
                }
                <button type="button" class="btn btn-secondary add-ingredient">Добавить ингредиент</button>
            </div>

            <div id="steps-container">
                <h4>Шаги приготовления</h4>
                @{
                    var stepsCount = Model?.Steps?.Count ?? 1;
                    for (int i = 0; i < stepsCount; i++)
                    {
                        <div class="step-row">
                            <div class="form-group">
                                <label>Описание шага</label>
                                <textarea name="steps[@i].Description" class="form-control" maxlength="255">@(Model?.Steps != null && i < Model.Steps.Count ? Model.Steps[i].Description : "")</textarea>
                            </div>
                            <div class="form-group">
                                <label>Время выполнения (в минутах)</label>
                                <input name="steps[@i].Time" type="number" class="form-control" min="0" value="@(Model?.Steps != null && i < Model.Steps.Count ? Model.Steps[i].Time : 10)" />
                            </div>
                            @if (i > 0)
                            {
                                <button type="button" class="btn btn-danger remove-step">Удалить</button>
                            }
                        </div>
                    }
                }
                <button type="button" class="btn btn-secondary add-step">Добавить шаг</button>
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Сохранить" class="btn btn-primary" />
                <a asp-action="Index" asp-controller="Recipe" class="btn btn-secondary">Отмена</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        const ingredientMeasures = {};
        @foreach (var ingredient in ViewBag.Ingredients as IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
        {
            @:ingredientMeasures[@ingredient.Value] = '@ingredient.Group?.Name';
        }

        function updateMeasure(selectElement, index) {
            const ingredientId = selectElement.value;
            const measureInput = document.querySelector(`.measure-input[name="RecipeIngredients[${index}].Measure"]`);
            const measureDisplay = document.querySelectorAll(`.measure-display[data-index="${index}"]`)[0];
            let measure = ingredientMeasures[ingredientId] || '';
            if (measure.length > 20) {
                measure = measure.substring(0, 20);
                console.warn(`Единица измерения обрезана до 20 символов: ${measure}`);
            }
            measureInput.value = measure;
            measureDisplay.textContent = measure;
        }

        document.addEventListener('DOMContentLoaded', function () {
            let ingredientIndex = @(Model?.RecipeIngredients?.Count ?? 1);
            let stepIndex = @(Model?.Steps?.Count ?? 1);

            document.querySelector('.add-ingredient').addEventListener('click', function () {
                const container = document.getElementById('ingredients-container');
                const newRow = container.querySelector('.ingredient-row').cloneNode(true);
                newRow.querySelectorAll('input, select').forEach(input => {
                    const name = input.name.replace(/\[\d+\]/, '[' + ingredientIndex + ']');
                    input.name = name;
                    if (input.type === 'number') input.value = '1';
                    else if (input.type !== 'file') input.value = '';
                });
                const measureDisplay = newRow.querySelectorAll('.measure-display')[0];
                measureDisplay.setAttribute('data-index', ingredientIndex);
                measureDisplay.textContent = '';
                const measureInput = newRow.querySelector('.measure-input');
                measureInput.value = '';
                const selectElement = newRow.querySelector('.ingredient-select');
                selectElement.setAttribute('onchange', `updateMeasure(this, ${ingredientIndex})`);
                newRow.querySelector('.remove-ingredient')?.remove();
                newRow.appendChild(document.createElement('button')).outerHTML = '<button type="button" class="btn btn-danger remove-ingredient">Удалить</button>';
                container.appendChild(newRow);
                ingredientIndex++;
            });

            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-ingredient')) {
                    e.target.parentElement.remove();
                }
            });

            document.querySelector('.add-step').addEventListener('click', function () {
                const container = document.getElementById('steps-container');
                const newRow = container.querySelector('.step-row').cloneNode(true);
                newRow.querySelectorAll('input, textarea').forEach(input => {
                    const name = input.name.replace(/\[\d+\]/, '[' + stepIndex + ']');
                    input.name = name;
                    if (input.type === 'number') input.value = '10';
                    else input.value = '';
                });
                newRow.querySelector('.remove-step')?.remove();
                newRow.appendChild(document.createElement('button')).outerHTML = '<button type="button" class="btn btn-danger remove-step">Удалить</button>';
                container.appendChild(newRow);
                stepIndex++;
            });

            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-step')) {
                    e.target.parentElement.remove();
                }
            });

            document.querySelector('form').addEventListener('submit', function (e) {
                let isValid = true;

                const name = document.querySelector('input[name="Name"]');
                if (!name.value.trim()) {
                    isValid = false;
                    name.classList.add('is-invalid');
                }

                const cookingTime = document.querySelector('input[name="CookingTime"]');
                if (!cookingTime.value || cookingTime.value <= 0) {
                    isValid = false;
                    cookingTime.classList.add('is-invalid');
                }

                const servings = document.querySelector('input[name="Servings"]');
                if (!servings.value || servings.value <= 0) {
                    isValid = false;
                    servings.classList.add('is-invalid');
                }

                const categoryId = document.querySelector('select[name="CategoryID"]');
                if (!categoryId.value) {
                    isValid = false;
                    categoryId.classList.add('is-invalid');
                }

                document.querySelectorAll('.ingredient-row').forEach(row => {
                    const quantity = row.querySelector('input[name*="Quantity"]');
                    const ingredientId = row.querySelector('select[name*="IngredientId"]');
                    if (!quantity.value || quantity.value <= 0) {
                        isValid = false;
                        quantity.classList.add('is-invalid');
                    }
                    if (!ingredientId.value) {
                        isValid = false;
                        ingredientId.classList.add('is-invalid');
                    }
                });

                document.querySelectorAll('.step-row').forEach(row => {
                    const description = row.querySelector('textarea[name*="Description"]');
                    const time = row.querySelector('input[name*="Time"]');
                    if (!description.value.trim()) {
                        isValid = false;
                        description.classList.add('is-invalid');
                    }
                    if (!time.value || time.value < 0) {
                        isValid = false;
                        time.classList.add('is-invalid');
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                }
            });

            document.querySelectorAll('.ingredient-select').forEach((select, index) => {
                updateMeasure(select, index);
            });
        });
    </script>
}